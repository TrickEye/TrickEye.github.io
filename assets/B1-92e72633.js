import{B as o}from"./BlogParagraph-143b37af.js";import{B as d}from"./BlogFigure-53f4c0d6.js";import{B as C}from"./BlogCodeBlock-f16cfdb7.js";import{b as f}from"./meta-d8b0dd7b.js";import{d as g,c as p,a as l,w as t,u as c,o as m,b as e,t as _,N as r,m as i,p as b,l as S,k as s,_ as B}from"./index-ebbd69ee.js";import"./Card-a8712cd6.js";const h="/assets/P1-3e5f7c7e.png",x="/assets/P2-dffb86b8.png",V="/assets/P3-2ff14773.png",I="/assets/P4.drawio-4269fab9.png",a=n=>(b("data-v-c05a2b9e"),n=n(),S(),n),P={class:"blog"},w=a(()=>s("em",null,"应该",-1)),v=a(()=>s("br",null,null,-1)),k=a(()=>s("br",null,null,-1)),D=a(()=>s("br",null,null,-1)),L=a(()=>s("em",null,"应该",-1)),N=a(()=>s("br",null,null,-1)),M=g({__name:"B1",setup(n){const u=f.B1;return document.title=u.title,(R,y)=>(m(),p("div",P,[l(c(r),{prefix:"bar",class:"title"},{default:t(()=>[e(_(c(u).title),1)]),_:1}),l(c(r),{prefix:"bar",class:"date"},{default:t(()=>[e(_(c(u).date),1)]),_:1}),l(c(i)),l(o,null,{default:t(()=>[e(" 写在前面，如果你是 Mac 用户，有可能需要先在终端输入 xcode-select --install 来安装必要的工具。 ")]),_:1}),l(o,null,{default:t(()=>[e(" 要用VSCode来写C语言，总得先不用VSCode写C语言嘛对吧。或者说，得先搞懂C语言的运行是什么过程。 ")]),_:1}),l(C,{code:"gcc code.c -o code.exe",language:"bash"},{default:t(()=>[e(" 将 code.c 编译为可执行文件的指令 ")]),_:1}),l(o,null,{default:t(()=>[e(" gcc 是编译器，一个软件，老师肯定跟你介绍过什么是编译器，这行指令干的事情就是运行这个软件。 不过 gcc 后面的三坨东西就不是软件了，而是在运行 gcc 软件的时候需要告诉 gcc 的信息。 ")]),_:1}),l(o,null,{default:t(()=>[e(" code.c 的意义是一个文件名，（我们假设写的代码叫做 code.c ，那么编译器得知这个信息之后就会读取 code.c 这个文件。编译器需要读取这个文件才能编译。 ")]),_:1}),l(o,null,{default:t(()=>[e(" -o 是编译器的参数，告诉编译器 -o 的作用是告诉编译器输出的可执行文件放在哪里。 code.exe 的意义是一个文件名。和前面的 -o 一起，意义是告诉编译器编译好后的程序保存为 code.exe ")]),_:1}),l(d,{src:c(h),title:"检验 GCC 存在性"},{default:t(()=>[e(" 要怎么验证电脑里面有没有 gcc 这个软件呢？ 一个办法是打开一个终端（ Windows 徽标键 + R ，然后输入 cmd） 然后在新的窗口里面输入 gcc 。 例如下面这张图，就是正常运行 gcc 的结果。 ")]),_:1},8,["src"]),l(d,{src:c(x)},{default:t(()=>[e(" 他会告诉你没有输入文件，当然了，毕竟我的确没有告诉他读取哪个文件，但这至少证明了电脑里面有 gcc 存在。 ")]),_:1},8,["src"]),l(o,null,{default:t(()=>[e(" 总结一下，要运行一个 C 语言文件，需要先编译得到程序，再去执行这个程序。其他的工具比如 dev-IDE 看起来可以一键运行的原因是它自动帮助你完成了“编译-执行”这个过程。VS Code 不能一键运行的原因也是因为 VS Code 需要经过一定的配置才能帮你自动完成“编译-执行”这个过程。 ")]),_:1}),l(c(i)),l(o,null,{default:t(()=>[e(" VS Code 本身是不对 C 语言提供完整支持的，不过 VS Code 提供相应的拓展来帮助完成对应的功能。下面会介绍一些。 ")]),_:1}),l(o,null,{default:t(()=>[e(" VS Code 的软件市场在最左边侧边栏从上往下的第5个。（一个田字格但是右上角那个方块飞了）点进去之后有个搜索框，搜索 C。 会搜到一个标题为 C/C++ ，简介是 C/C++ IntelliSense, debugging, and code browsing ，作者是 Microsoft 的拓展。 点进去，按 Install ，就会给你的 VS Code 安装这个拓展。 ")]),_:1}),l(o,null,{default:t(()=>[e(" 装完这个拓展其实就可以调试了。调试按钮在左边侧边栏第四个，有个三角形那个。可以随便写一点 C 语言代码， 然后保存，点调试界面的 “Run and Debug” 按钮，然后会让你选一个配置 ")]),_:1}),l(d,{src:c(V),title:"Debug 选择配置"},{default:t(()=>[e(" 如果你电脑中有 gcc ，那么这边"),w,e("会识别到你的编译器。点击它，VS Code 会闪一些字符，然后就可以调试了。"),v,e(" VS Code 调试功能非常强大，这就是另一门学问了。 ")]),_:1},8,["src"]),l(o,null,{default:t(()=>[e(" 不过这个插件目前只是能正确地调试，但是代码预览和编辑这块要正常的话还需要调整一下 C/C++ 这个插件的设置。 插件详情页 “Disable” “Uninstall” 两个按钮右边有个设置，菜单里面点 Extension Settings. 可以编辑这个插件的设置。 ")]),_:1}),l(d,{src:c(I),title:"配置 C/C++ 插件以正确识别 IntelliSense"},{default:t(()=>[e(" 1. Intelli Sense Mode 字段可以根据操作系统和软件架构选择。如果你不了解这方面的知识，那么 Windows 用户可以选择 windows-gcc-x86 ； Mac 用户可以选择 macos-gcc-arm "),k,e(" 2. Compiler Path 字段要求填写 gcc 在本机中的位置，这取决于 gcc 编译器安装在你电脑中的哪个位置。不一定与我的完全相同。"),D,e(" 修改好上面两个配置后 IntelliSense "),L,e("就可以自动工作了。 ")]),_:1},8,["src"]),l(o,null,{default:t(()=>[e(" 上面讲的是调试，需要强调的是调试和运行还不是完全一样的。 一键运行需要另一个拓展：搜 Code Runner 并安装，安装好后，打开一个 C 语言文件，点右键就可以在菜单里面看到 Run Code 了。 这样就可以一键运行了。一键运行的原理是帮你在一个终端里面输入“编译-执行”操作所需要的指令并帮你按回车，所以还挺简单粗暴的。 ")]),_:1}),l(c(i)),l(o,null,{default:t(()=>[e(" 容我再介绍一下 CLion ，是由 JetBrains 公司出品的一家商业化 C/C++ 开发环境。与 VS Code 相比最大的好处是上面所提到的插件全部都被收归国有，不需要再配置。 ")]),_:1}),l(o,null,{default:t(()=>[e(" 此前一段时间 Clion 被人诟病不适用于新手的原因是因为它需要使用 cmakelist 或者 makefile 来管理项目，这其实比较适合大型项目， 但是对只有一两个文件的小项目来说很不友好。但是好在 2022.3 版本之后，官方提供了在 CLion 中运行单文件的功能。 这使得 CLion 仅有的缺点不再存在了，因此我在这里推荐各位有机会去试试。 ")]),_:1}),l(o,null,{default:t(()=>[e(" CLion 这玩意儿是要收钱的，不过学生有特殊教育许可。要获取 CLion ，需要先访问 JetBrains 官网，使用北航邮箱获得教育许可证，方可下载 CLion 。不在此赘述。 ")]),_:1}),N]))}});const T=B(M,[["__scopeId","data-v-c05a2b9e"]]);export{T as default};
